parse: UNDERBAR
##
## Ends in an error in state: 0.
##
## parse' -> . parse [ # ]
##
## The known suffix of the stack is as follows:
##
##

Wow, you caught error that I don't know when it appears! (O.O)
Pls, send your input to me so that I can add cooler discription!

parse: LET THEN
##
## Ends in an error in state: 1.
##
## let_binding -> LET . rec_f lvalue EQUALLY let_body [ LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

After LET token and before REC/name-that-binding token
appered something that I can't recognize (>.<)

parse: LET REC THEN
##
## Ends in an error in state: 3.
##
## let_binding -> LET rec_f . lvalue EQUALLY let_body [ LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET rec_f
##

After LET/REC token and before name-that-binding token
appered something that I can't recognize (>.<)

parse: LET LEFTPARENT THEN
##
## Ends in an error in state: 6.
##
## lvalue -> LEFTPARENT . lvalue COMMA separated_nonempty_list(COMMA,lvalue) RIGHTPARENT [ UNDERBAR RIGHTPARENT NAME LEFTPARENT EQUALLY COMMA ARROW ]
## unit -> LEFTPARENT . RIGHTPARENT [ UNDERBAR RIGHTPARENT NAME LEFTPARENT EQUALLY COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LEFTPARENT
##

Oh, boy, you put some nonsence between brackets,
when you named your value of function (Y.Y)

parse: LET LEFTPARENT NAME UNDERBAR
##
## Ends in an error in state: 9.
##
## lvalue -> LEFTPARENT lvalue . COMMA separated_nonempty_list(COMMA,lvalue) RIGHTPARENT [ UNDERBAR RIGHTPARENT NAME LEFTPARENT EQUALLY COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LEFTPARENT lvalue
##

Um, you missed comma when declaring tuple to be named (I.I)

parse: LET LEFTPARENT NAME COMMA THEN
##
## Ends in an error in state: 10.
##
## lvalue -> LEFTPARENT lvalue COMMA . separated_nonempty_list(COMMA,lvalue) RIGHTPARENT [ UNDERBAR RIGHTPARENT NAME LEFTPARENT EQUALLY COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LEFTPARENT lvalue COMMA
##

Um, eto, eh! After comma in tuple declaration should be another lvalue! (I.I)

parse: LET LEFTPARENT NAME COMMA NAME UNDERBAR
##
## Ends in an error in state: 13.
##
## separated_nonempty_list(COMMA,lvalue) -> lvalue . [ RIGHTPARENT ]
## separated_nonempty_list(COMMA,lvalue) -> lvalue . COMMA separated_nonempty_list(COMMA,lvalue) [ RIGHTPARENT ]
##
## The known suffix of the stack is as follows:
## lvalue
##

You may missed RIGHTPARENT in tuple declaration or may COMMA! (P.P)

parse: LET LEFTPARENT NAME COMMA NAME COMMA THEN
##
## Ends in an error in state: 14.
##
## separated_nonempty_list(COMMA,lvalue) -> lvalue COMMA . separated_nonempty_list(COMMA,lvalue) [ RIGHTPARENT ]
##
## The known suffix of the stack is as follows:
## lvalue COMMA
##

Um, eto, eh! After comma in tuple declaration should be another lvalue! (I.I)

parse: LET NAME UNDERBAR
##
## Ends in an error in state: 16.
##
## let_binding -> LET rec_f lvalue . EQUALLY let_body [ LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET rec_f lvalue
##

Ups, between name to be binded and EQUALLY should not be nothing! (\\.\\)

parse: LET NAME EQUALLY UNDERBAR
##
## Ends in an error in state: 17.
##
## let_binding -> LET rec_f lvalue EQUALLY . let_body [ LET IN EOF ]
##
## The known suffix of the stack is as follows:
## LET rec_f lvalue EQUALLY
##

Yo, you should declarate function or value after EQUALLY token! (K.K)

parse: LET NAME EQUALLY LEFTPARENT UNDERBAR
##
## Ends in an error in state: 21.
##
## atom -> LEFTPARENT . expr RIGHTPARENT [ THEN STRING RIGHTPARENT NAME MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET LEFTPARENT INT IN IF HIGHLVLPREDICATE FUN FLOAT EOF ELSE COMMA BOOL ]
## atom -> LEFTPARENT . expr COMMA separated_nonempty_list(COMMA,expr) RIGHTPARENT [ THEN STRING RIGHTPARENT NAME MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET LEFTPARENT INT IN IF HIGHLVLPREDICATE FUN FLOAT EOF ELSE COMMA BOOL ]
## unit -> LEFTPARENT . RIGHTPARENT [ THEN STRING RIGHTPARENT NAME MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET LEFTPARENT INT IN IF HIGHLVLPREDICATE FUN FLOAT EOF ELSE COMMA BOOL ]
##
## The known suffix of the stack is as follows:
## LEFTPARENT
##

So, you either write expression after LEFTPARENT,
or nothing to declarate unit! (G.G)

parse: LET NAME EQUALLY IF UNDERBAR
##
## Ends in an error in state: 23.
##
## expr -> IF . expr THEN expr ELSE expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF
##

God says, after IF word must be expression expression! (;;.;;)

parse: LET NAME EQUALLY FUN THEN
##
## Ends in an error in state: 24.
##
## expr -> FUN . nonempty_list(lvalue) ARROW let_body [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## FUN
##

And our God says, after FUN token should be name of argument! (Z.Z)

parse: LET NAME EQUALLY FUN NAME ARROW UNDERBAR
##
## Ends in an error in state: 26.
##
## expr -> FUN nonempty_list(lvalue) ARROW . let_body [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## FUN nonempty_list(lvalue) ARROW
##

Yo, you should declarate function or value after ARROW token! (K.K)

parse: LET NAME EQUALLY LET NAME EQUALLY BOOL THEN
##
## Ends in an error in state: 28.
##
## inner_let_bind -> let_binding . IN [ STRING NAME LET LEFTPARENT INT IF FUN FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 47, spurious reduction of production expr -> atom
## In state 65, spurious reduction of production let_body -> list(inner_let_bind) expr
## In state 66, spurious reduction of production let_binding -> LET rec_f lvalue EQUALLY let_body
##

Before IN you added something that are not part of let-body expression! ($.$)

parse: LET NAME EQUALLY LET NAME EQUALLY BOOL IN UNDERBAR
##
## Ends in an error in state: 30.
##
## list(inner_let_bind) -> inner_let_bind . list(inner_let_bind) [ STRING NAME LEFTPARENT INT IF FUN FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## inner_let_bind
##

After IN token must be some expression, I think so! (///.///)

parse: LET NAME EQUALLY FUN NAME THEN
##
## Ends in an error in state: 32.
##
## nonempty_list(lvalue) -> lvalue . [ ARROW ]
## nonempty_list(lvalue) -> lvalue . nonempty_list(lvalue) [ ARROW ]
##
## The known suffix of the stack is as follows:
## lvalue
##

You know, after name of argument in FUN-expression 
should be another one xor ARROW token! (#.#)

parse: LET NAME EQUALLY IF BOOL RIGHTPARENT
##
## Ends in an error in state: 38.
##
## expr -> IF expr . THEN expr ELSE expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
## expr -> expr . HIGHLVLPREDICATE expr [ THEN MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ]
## expr -> expr . MIDHIGHLVLPREDICATE expr [ THEN MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ]
## expr -> expr . MIDLVLPREDICATE expr [ THEN MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ]
## expr -> expr . LOWMIDLVLPREDICATE expr [ THEN MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ]
## expr -> expr . LOWLVLPREDICATE expr [ THEN MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ]
##
## The known suffix of the stack is as follows:
## IF expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 47, spurious reduction of production expr -> atom
##

Honestly, this is bullshit (my code, not your). 
I don't have enough contex, you may placed something
that are not expression before PREDICATE xor THEN token! (:dead:)

parse: LET NAME EQUALLY IF BOOL THEN UNDERBAR
##
## Ends in an error in state: 39.
##
## expr -> IF expr THEN . expr ELSE expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

Between THEN and your then-code appered something! (@.@)

parse: LET NAME EQUALLY IF BOOL THEN BOOL THEN
##
## Ends in an error in state: 40.
##
## expr -> IF expr THEN expr . ELSE expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
## expr -> expr . HIGHLVLPREDICATE expr [ MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ELSE ]
## expr -> expr . MIDHIGHLVLPREDICATE expr [ MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ELSE ]
## expr -> expr . MIDLVLPREDICATE expr [ MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ELSE ]
## expr -> expr . LOWMIDLVLPREDICATE expr [ MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ELSE ]
## expr -> expr . LOWLVLPREDICATE expr [ MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE ELSE ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 47, spurious reduction of production expr -> atom
##

Between ELSE and your then-code appered something!
Xor between PREDICATE and first to be applied expression
appered something, yes! (*.*)

parse: LET NAME EQUALLY BOOL MIDLVLPREDICATE UNDERBAR
##
## Ends in an error in state: 41.
##
## expr -> expr MIDLVLPREDICATE . expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## expr MIDLVLPREDICATE
##

Between PREDICATE and second to be applied expression
appered something, yes! (*.*)

parse: LET NAME EQUALLY BOOL MIDHIGHLVLPREDICATE UNDERBAR
##
## Ends in an error in state: 43.
##
## expr -> expr MIDHIGHLVLPREDICATE . expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## expr MIDHIGHLVLPREDICATE
##

Between PREDICATE and second to be applied expression
appered something, yes! (*.*)

parse: LET NAME EQUALLY BOOL HIGHLVLPREDICATE UNDERBAR
##
## Ends in an error in state: 45.
##
## expr -> expr HIGHLVLPREDICATE . expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## expr HIGHLVLPREDICATE
##

Between PREDICATE and second to be applied expression
appered something, yes! (*.*)

parse: LET NAME EQUALLY BOOL UNDERBAR
##
## Ends in an error in state: 47.
##
## apply -> atom . [ STRING NAME LEFTPARENT INT IF FUN FLOAT BOOL ]
## expr -> atom . [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## atom
##

After atomic expression exist thing that should not exist! (%.%)

parse: LET NAME EQUALLY BOOL LOWMIDLVLPREDICATE UNDERBAR
##
## Ends in an error in state: 50.
##
## expr -> expr LOWMIDLVLPREDICATE . expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## expr LOWMIDLVLPREDICATE
##

Between PREDICATE and second to be applied expression
appered something, yes! (*.*)

parse: LET NAME EQUALLY BOOL LOWLVLPREDICATE UNDERBAR
##
## Ends in an error in state: 52.
##
## expr -> expr LOWLVLPREDICATE . expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## expr LOWLVLPREDICATE
##

Between PREDICATE and second to be applied expression
appered something, yes! (*.*)

parse: LET NAME EQUALLY BOOL BOOL UNDERBAR
##
## Ends in an error in state: 54.
##
## apply -> apply atom . [ STRING NAME LEFTPARENT INT IF FUN FLOAT BOOL ]
## apply -> atom . [ STRING NAME LEFTPARENT INT IF FUN FLOAT BOOL ]
## expr -> atom . [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## apply atom
##

After atomic expression exist thing that should not exist! (%.%)

parse: LET NAME EQUALLY IF BOOL THEN BOOL ELSE UNDERBAR
##
## Ends in an error in state: 55.
##
## expr -> IF expr THEN expr ELSE . expr [ THEN RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET IN HIGHLVLPREDICATE EOF ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

ELSE token and else-code were squeezed each other thing! (!.!)

parse: LET NAME EQUALLY LEFTPARENT BOOL THEN
##
## Ends in an error in state: 57.
##
## atom -> LEFTPARENT expr . RIGHTPARENT [ THEN STRING RIGHTPARENT NAME MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET LEFTPARENT INT IN IF HIGHLVLPREDICATE FUN FLOAT EOF ELSE COMMA BOOL ]
## atom -> LEFTPARENT expr . COMMA separated_nonempty_list(COMMA,expr) RIGHTPARENT [ THEN STRING RIGHTPARENT NAME MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET LEFTPARENT INT IN IF HIGHLVLPREDICATE FUN FLOAT EOF ELSE COMMA BOOL ]
## expr -> expr . HIGHLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## expr -> expr . MIDHIGHLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## expr -> expr . MIDLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## expr -> expr . LOWMIDLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## expr -> expr . LOWLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
##
## The known suffix of the stack is as follows:
## LEFTPARENT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 47, spurious reduction of production expr -> atom
##

You wanna use tuple or place expression between brackets?
But you placed bad thing before COMMA or RIGHTPARENT at each case!
Xor thing be placed after expression and before PREDICATE! (F.F)

parse: LET NAME EQUALLY LEFTPARENT BOOL COMMA UNDERBAR
##
## Ends in an error in state: 59.
##
## atom -> LEFTPARENT expr COMMA . separated_nonempty_list(COMMA,expr) RIGHTPARENT [ THEN STRING RIGHTPARENT NAME MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE LET LEFTPARENT INT IN IF HIGHLVLPREDICATE FUN FLOAT EOF ELSE COMMA BOOL ]
##
## The known suffix of the stack is as follows:
## LEFTPARENT expr COMMA
##

At expression tuple you plased something that are not
expression after first COMMA! (M.M)

parse: LET NAME EQUALLY LEFTPARENT BOOL COMMA BOOL THEN
##
## Ends in an error in state: 62.
##
## expr -> expr . HIGHLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## expr -> expr . MIDHIGHLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## expr -> expr . MIDLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## expr -> expr . LOWMIDLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## expr -> expr . LOWLVLPREDICATE expr [ RIGHTPARENT MIDLVLPREDICATE MIDHIGHLVLPREDICATE LOWMIDLVLPREDICATE LOWLVLPREDICATE HIGHLVLPREDICATE COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RIGHTPARENT ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RIGHTPARENT ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 47, spurious reduction of production expr -> atom
##

At your tuple you placed somthing that should not be place
after one of expressions! 
Xor you placed unexpected one between expression and PREDICATE! (A.A)

parse: LET NAME EQUALLY LEFTPARENT BOOL COMMA BOOL COMMA UNDERBAR
##
## Ends in an error in state: 63.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RIGHTPARENT ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

After COMMA in tuple should be expression! (R.R)

parse: LET NAME EQUALLY BOOL THEN
##
## Ends in an error in state: 71.
##
## nonempty_list(let_binding) -> let_binding . [ EOF ]
## nonempty_list(let_binding) -> let_binding . nonempty_list(let_binding) [ EOF ]
##
## The known suffix of the stack is as follows:
## let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 47, spurious reduction of production expr -> atom
## In state 65, spurious reduction of production let_body -> list(inner_let_bind) expr
## In state 66, spurious reduction of production let_binding -> LET rec_f lvalue EQUALLY let_body
##

Your program ends not good xor your last let-statement end not good! (E.e)

